<?xml version="1.0" encoding="utf-8"?>

<!--

	ADOBE SYSTEMS INCORPORATED
	Copyright 2008 Adobe Systems Incorporated
	All Rights Reserved.

	NOTICE: Adobe permits you to use, modify, and distribute this file
	in accordance with the terms of the license agreement accompanying it.

-->

<!--- The default skin class for the Spark Button component.

	   @see spark.components.Button

	  @langversion 3.0
	  @playerversion Flash 10
	  @playerversion AIR 1.5
	  @productversion Flex 4
-->
<s:SparkButtonSkin xmlns:fb="http://ns.adobe.com/flashbuilder/2009" xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark"
				   minWidth="21" minHeight="21" alpha.disabled="0.5" currentStateChanging="onCurrentStateChanging(event)">

	<fx:Metadata>
		<![CDATA[ 
        /** 
         * @copy spark.skins.spark.ApplicationSkin#hostComponent
         */
        [HostComponent("spark.components.ToggleButton")]
        ]]>
	</fx:Metadata>

	<fx:Script fb:purpose="styling">
		<![CDATA[
			import spark.components.Group;
			/* Define the skin elements that should not be colorized.
			For button, the graphics are colorized but the label is not. */
			static private const exclusions:Array = [];
			
			import mx.events.StateChangeEvent;
			
			import spark.components.Button;
			
			private function onCurrentStateChanging(event:StateChangeEvent):void {
				switch (event.newState) {					
					case "up":
					case "over":
					case "down":
						setIcon("iconUp");
						break;
					case "upAndSelected":
					case "overAndSelected":
					case "downAndSelected":
						setIcon("iconUpAndSelected");
						break;
				}
			}
			
			private function setIcon(type:String):void {
				if (hostComponent.getStyle(type) != null) {
					icon.source = hostComponent.getStyle(type);
				}
			}


			/**
			 * @private
			 */
			override public function get colorizeExclusions():Array {
				return exclusions;
			}

			/**
			 * @private
			 */
			override protected function initializationComplete():void {
				useChromeColor = true;
				super.initializationComplete();
			}

			/**
			 *  @private
			 */
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void {
				var cr:Number = getStyle("cornerRadius");

				if (cornerRadius != cr) {
					cornerRadius = cr;
					shadow.radiusX = cornerRadius;
					fill.radiusX = cornerRadius;
					border.radiusX = cornerRadius;
				}


				super.updateDisplayList(unscaledWidth, unscaledHeight);
			}

			private var cornerRadius:Number = 2;
		]]>
	</fx:Script>

	<!-- states -->
	<s:states>
		<s:State name="up" />
		<s:State name="over" />
		<s:State name="down" />
		<s:State name="disabled" />
		<s:State name="upAndSelected" />
		<s:State name="downAndSelected" />
		<s:State name="overAndSelected" />
		<s:State name="disabledAndSelected" />

	</s:states>

	<!-- layer 1: shadow -->
	<!--- @private -->
	<s:Rect id="shadow" bottom="-1" left="-1" right="-1" top="-1" radiusX="2" alpha="0">
		<s:fill>
			<s:LinearGradient rotation="90">
				<s:GradientEntry color="0x000000" color.down="0xFFFFFF" alpha="0.01" alpha.down="0" />
				<s:GradientEntry color="0x000000" color.down="0xFFFFFF" alpha="0.07" alpha.down="0.5" />
			</s:LinearGradient>
		</s:fill>
	</s:Rect>

	<!-- layer 2: fill -->
	<!--- @private -->
	<s:Rect id="fill" bottom="1" left="1" right="1" top="1" radiusX="2" alpha="0">
		<s:fill>
			<s:LinearGradient rotation="90">
				<s:GradientEntry color="0xFFFFFF" color.down="0xAAAAAA" color.over="0xBBBDBD" alpha="0.85" />
				<s:GradientEntry color="0xD8D8D8" color.down="0x929496" color.over="0x9FA0A1" alpha="0.85" />
			</s:LinearGradient>
		</s:fill>
	</s:Rect>


	<!-- layer 7: border - put on top of the fill so it doesn't disappear when scale is less than 1 -->
	<!--- @private -->
	<s:Rect id="border" width="24" height="24" bottom="0" left="0" right="0" top="0" radiusX="2" alpha="0">
		<s:stroke>
			<s:LinearGradientStroke rotation="90" weight="1">
				<s:GradientEntry color="0x000000" alpha="0.5625" alpha.down="0.6375" />
				<s:GradientEntry color="0x000000" alpha="0.75" alpha.down="0.85" />
			</s:LinearGradientStroke>
		</s:stroke>
	</s:Rect>

	<!-- layer 8: text -->
	<s:Group horizontalCenter="0" verticalCenter="0" minHeight="28">
		<s:layout>
			<s:HorizontalLayout horizontalAlign="center" verticalAlign="middle" gap="0" />
		</s:layout>
		<s:BitmapImage id="icon" width="{hostComponent.getStyle('iconWidth')}" height="{hostComponent.getStyle('iconHeight')}" verticalCenter="0"
					   source="{hostComponent.getStyle('iconUp')}"/>
	</s:Group>


</s:SparkButtonSkin>
