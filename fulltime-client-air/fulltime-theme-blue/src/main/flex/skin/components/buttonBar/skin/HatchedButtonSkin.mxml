<?xml version="1.0" encoding="utf-8"?>
<s:SparkSkin xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:mx="library://ns.adobe.com/flex/halo" xmlns:s="library://ns.adobe.com/flex/spark" 
			 minWidth="21" minHeight="21" alpha.disabled="0.5" xmlns:buttonBar="skin.components.buttonBar.*">
	<!--
	/*
	* The contents of this file are subject to the Mozilla Public License Version
	* 1.1 (the "License"); you may not use this file except in compliance with
	* the License. You may obtain a copy of the License at
	* http://www.mozilla.org/MPL/
	* 
	* Software distributed under the License is distributed on an "AS IS" basis,
	* WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
	* for the specific language governing rights and limitations under the
	* License.
	*
	* The Original Code is the HatchedButtonBar component.
	*
	* The Initial Developer of the Original Code is
	* Anirudh Sasikumar (http://anirudhs.chaosnet.org/).
	* Portions created by the Initial Developer are Copyright (C) 2008
	* the Initial Developer. All Rights Reserved.
	*
	* Contributor(s):
	*
	*/
	-->
	<fx:Metadata>
		<![CDATA[ 
		/** 
		* @copy spark.skins.spark.ApplicationSkin#hostComponent
		*/
		[HostComponent("skin.components.buttonBar.HatchedButton")]
		]]>
	</fx:Metadata>

	<fx:Script>
		<![CDATA[
			/* Define the skin elements that should not be colorized.
			For button, the graphics are colorized but the label is not. */
			static private const exclusions:Array = ["labelDisplay"];

			/**
			 * @copy spark.skins.SparkSkin#colorizeExclusions
			 */
			override public function get colorizeExclusions():Array {
				return exclusions;
			}
		]]>
	</fx:Script>

	<!-- states -->
	<s:states>
		<s:State name="up" />
		<s:State name="over" />
		<s:State name="down" />
		<s:State name="disabled" />
		<s:State name="upAndSelected" stateGroups="selectedStates, selectedUpStates" />
		<s:State name="overAndSelected" stateGroups="overStates, selectedStates" />
		<s:State name="downAndSelected" stateGroups="downStates, selectedStates" />
		<s:State name="disabledAndSelected" stateGroups="selectedUpStates, disabledStates, selectedStates" />
	</s:states>

	<!-- shadow -->
	<buttonBar:HatchRect width="69" height="20" bottom="2" left="-1" right="-1" top="-1" excludeFrom="selectedStates">
		<buttonBar:fill>
			<s:LinearGradient rotation="90">
				<s:GradientEntry color="0x000000" color.down="0xFFFFFF" alpha="0.01" alpha.down="0" />
				<s:GradientEntry color="0x000000" color.down="0xFFFFFF" alpha="0.07" alpha.down="0.5" />
			</s:LinearGradient>
		</buttonBar:fill>
	</buttonBar:HatchRect>

	<!-- fill -->
	<buttonBar:HatchRect width="69" height="20" bottom="1" left="1" right="1" top="1">
		<buttonBar:fill>
			<s:LinearGradient rotation="90">
				<s:GradientEntry color="0xFFFFFF" color.downStates="0xAAAAAA" color.overStates="0x89BDEE" color.selectedUpStates="0x89BDEE" alpha="0.85" alpha.overAndSelected="1" />
				<s:GradientEntry color="0xD8D8D8" color.downStates="0xCEDFEF" color.over="0x9FA0A1" color.overAndSelected="0x89BDEE" color.selectedUpStates="0x89BDEE" alpha="0.85"
								 alpha.overAndSelected="1" />
			</s:LinearGradient>
		</buttonBar:fill>
		<buttonBar:filters>
			<s:GlowFilter color="0x7C8CB7" alpha="0.7" />
		</buttonBar:filters>
	</buttonBar:HatchRect>

	<!--  border - put on top of the fill so it doesn't disappear when scale is less than 1 -->
	<buttonBar:HatchRect id="hatchRect" width="69" height="20" bottom="1" left="0" right="0" top="1" hideBottomLine.selectedStates="true">
		<buttonBar:stroke>
			<s:LinearGradientStroke rotation="90" weight="1">
				<s:GradientEntry color="0x333333" alpha="0.5625" alpha.down="0.6375" alpha.selectedStates="0.6375" />
				<s:GradientEntry color="0x333333" alpha="0.75" alpha.down="0.85" alpha.selectedStates="0.85" />
			</s:LinearGradientStroke>
		</buttonBar:stroke>
	</buttonBar:HatchRect>

	<fx:Declarations>
		<!--s:Rotate id="rEffect" target="{labelDisplay}" angleTo="-35" autoCenterTransform="true" duration="1" /-->
	</fx:Declarations>
	<!-- text -->
	<!---
	@copy spark.buttonBar.supportClasses.ButtonBase#labelDisplay
	-->
	<s:Label id="labelDisplay" horizontalCenter="-1" textAlign="center" verticalAlign="bottom" verticalCenter="1" maxDisplayedLines="1">
	</s:Label>

</s:SparkSkin>
