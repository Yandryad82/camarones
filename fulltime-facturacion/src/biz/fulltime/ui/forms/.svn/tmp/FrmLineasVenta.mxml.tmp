<?xml version="1.0" encoding="utf-8"?>
<s:HGroup  xmlns:components1="biz.fulltime.ui.components.*" xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:mx="library://ns.adobe.com/flex/mx"
		   xmlns:s="library://ns.adobe.com/flex/spark"
		   width="100%" height="100%" creationComplete="creationCompleteHandler(event)" show="showHandler(event)">
	<fx:Script>
		<![CDATA[
			import biz.fulltime.conf.GeneralOptions;
			import biz.fulltime.model.Articulo;
			import biz.fulltime.model.Cotizaciones;
			import biz.fulltime.model.Deposito;
			import biz.fulltime.model.Documento;
			import biz.fulltime.model.LineaDocumento;
			import biz.fulltime.model.LineasDocumento;
			import biz.fulltime.model.Moneda;
			import biz.fulltime.model.ParticipacionVendedor;
			import biz.fulltime.model.PreciosVenta;
			import biz.fulltime.model.Usuario;
			import biz.fulltime.ui.facturacion.AntecedentesPnl;
			import biz.fulltime.ui.facturacion.ArticulosPnl;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.IFlexDisplayObject;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			
			import spark.components.TitleWindow;
			import spark.components.gridClasses.CellPosition;
			import spark.events.GridItemEditorEvent;
			import spark.events.GridSelectionEvent;
			
			import util.CatalogoFactory;
			
			private var helpWindow:TitleWindow;
			
			private var ddNum:DGNumStepperEditor = new DGNumStepperEditor();
			
			private var _lineasVenta:LineasDocumento;
			
			private var _moneda:Moneda;
			
			private var _deposito:Deposito;
			
			private var _preciosVenta:PreciosVenta;
			
			private var _cotizaciones:Cotizaciones;
			
			private var _documento:Documento;
			
			private var articulosPnl:ArticulosPnl;
			
			private var cellPos:CellPosition;
			
			private var _stock:Number;
			
			private var _changeLineasVenta:Boolean;
			
			private var _changeDeposito:Boolean;
			
			public var mostrarPrecioDist:Boolean = true;
			
			public var tieneCambios:Boolean = false;
			
			[Bindable]
			private var currentLine:LineaDocumento
			
			[Bindable]
			public function get stock():Number {
				return _stock;
			}
			
			public function set stock(value:Number):void {
				_stock = value;
			}
			
			[Bindable]
			public function get documento():Documento {
				return _documento;
			}
			
			[Bindable]
			public var hay_vendedor_dist:Boolean;
			
			public function set documento(value:Documento):void {
				_documento = value;
				
				hay_vendedor_dist = false;
				for each (var participacion:ParticipacionVendedor in _documento.comisiones.participaciones) {
					if (participacion.vendedor) {
						var numVendedor:Number = Number(participacion.vendedor.codigo);
						if (numVendedor >= 30 && numVendedor <= 50) {
							hay_vendedor_dist = true;
							break;
						}
					}
				}
				
			}
			
			[Bindable(event = "preciosVentaChange")]
			public function get preciosVenta():PreciosVenta {
				return _preciosVenta;
			}
			
			public function set preciosVenta(value:PreciosVenta):void {
				if (_preciosVenta !== value) {
					_preciosVenta = value;
				}
			}
			
			public function get deposito():Deposito {
				return _deposito;
			}
			
			public function set deposito(value:Deposito):void {
				if (_deposito !== value) {
					_deposito = value;
					_changeDeposito = true;
					invalidateProperties();
				}
			}
			
			[Bindable(event = "monedaChange")]
			public function get moneda():Moneda {
				return _moneda;
			}
			
			public function set moneda(value:Moneda):void {
				if (_moneda !== value) {
					_moneda = value;
					dispatchEvent(new Event("monedaChange"));
				}
			}
			
			protected function creationCompleteHandler(event:FlexEvent):void {
				callLater(function():void {
					dgLineasVenta.setFocus();
					if (dgLineasVenta.dataProvider.length > 0) {
						dgLineasVenta.setSelectedCell(0, 0);
						
						currentLine = lineasVenta.lineas[0];
						if (_deposito) {
							currentLine.deposito = _deposito.codigo;
						}
						currentLine.obtenerStock();
					}
					
				});
			}
			
			[Bindable]
			public function get lineasVenta():LineasDocumento {
				return _lineasVenta;
			}
			
			public function set lineasVenta(value:LineasDocumento):void {
				_lineasVenta = value;
				
				_changeLineasVenta = true;
				invalidateProperties();
			}
			
			override protected function commitProperties():void {
				super.commitProperties();
				
				if (deposito != null && lineasVenta != null && (_changeLineasVenta || _changeDeposito)) {
					_changeLineasVenta = false;
					_changeDeposito =  false;
					
					for each (var l:LineaDocumento in lineasVenta.lineas) {
						l.deposito = deposito.codigo;
						l.obtenerStock();
					}
					
					dgLineasVenta.dataProvider = lineasVenta.lineas;
				}
				
			}
			
			
			private function closePnlHelpHandler(event:CloseEvent):void {
				event.target.removeEventListener(CloseEvent.CLOSE, closePnlHelpHandler);
				PopUpManager.removePopUp(event.target as IFlexDisplayObject);
				dgLineasVenta.setFocus();
			}
			
			protected function dg_keyDownHandler(event:KeyboardEvent):void {
				cellPos = dgLineasVenta.selectedCell;
				
				if (event.keyCode == Keyboard.F1) {
					if (cellPos.columnIndex == 1 || cellPos.columnIndex == 2) {
						if (helpWindow) {
							return;
						}						
						helpWindow = new TitleWindow();
<<<<<<< .mine
						helpWindow.title = "ArtÃ­culos";
						helpWindow.width = 640;
						helpWindow.height = 620;
						
=======
						helpWindow.title = "Artículos";
						helpWindow.width = 640;
						helpWindow.height = 620;

>>>>>>> .r1064
						articulosPnl = new ArticulosPnl();
						
						PopUpManager.addPopUp(helpWindow, this.parentApplication.owner, true);
						PopUpManager.centerPopUp(helpWindow);
						
						helpWindow.addEventListener(CloseEvent.CLOSE, articulosCloseHandler);
						articulosPnl.addEventListener(CloseEvent.CLOSE, articulosCloseHandler);
						
						helpWindow.addElement(articulosPnl);
					} else if (cellPos.columnIndex == 4) {
						// Cancela el comportamiento por defecto al presionar la tecla 'F2'.						
						event.preventDefault();
						
						helpWindow = new TitleWindow();
						helpWindow.title = "Descuentos";
						helpWindow.width = 280;
						helpWindow.height = 220;
						helpWindow.visible = true;
						
						var lineaVenta2:LineaDocumento = lineasVenta.lineas.getItemAt(cellPos.rowIndex) as LineaDocumento;
						
						var _resumen:XML =
							<resumen/>
							;
						_resumen.total = lineaVenta2.getPrecio().toString();
						_resumen.descuento = lineaVenta2.getDescuento().toString();
						
						var descPnl:FrmDescuentos = new FrmDescuentos();
						descPnl.resumen = _resumen;
						
						PopUpManager.addPopUp(helpWindow, this.parentApplication.owner, true);
						PopUpManager.centerPopUp(helpWindow);
						
						descPnl.addEventListener(CloseEvent.CLOSE, closeHandler);
						
						helpWindow.addElement(descPnl);
						
						helpWindow.closeButton.visible = false;
					}
				} else if (event.keyCode == Keyboard.F2) { // Se presiono la tecla 'F2'
					if (cellPos.columnIndex == 1 || cellPos.columnIndex == 2) {
						// Cancela el comportamiento por defecto al presionar la tecla 'F2'.						
						event.preventDefault();
						
						mostrarAntecedentes(event);
					}
				} else if (event.keyCode == Keyboard.INSERT) { // Se presiono la tecla 'INSERT'
					var maxRow:int = dgLineasVenta.dataProvider.length - 1;
					if (hasPermEdition())
						if (maxRow + 2 > 17) {
							Alert.show("Se pueden agregar un mÃ¡ximo de " + 17 + " lÃ­neas por documento." );
						} else {
							agregarLineaVenta();
						}
				} else if (event.keyCode == Keyboard.ESCAPE) { // Se presiono la tecla 'ESC'
					dispatchEvent(new CloseEvent(CloseEvent.CLOSE));
				} else if (event.keyCode == Keyboard.ENTER) {
					var count:int = 0;
					var columns:ArrayCollection = new ArrayCollection(dgLineasVenta.columns.toArray());
					for each(var col:GridColumn in columns) {
						if (col.visible) {
							count++;
						}
					}					
					var maxCol:int = columns.length - 2;
					var maxRow:int = dgLineasVenta.dataProvider.length - 1;
					
					var colIndex:int;
					var rowIndex:int;
					if (cellPos == null) {
						colIndex = dgLineasVenta.editorColumnIndex;
						rowIndex = dgLineasVenta.editorRowIndex
					} else {
						var i:int = 1;
						while (!columns[cellPos.columnIndex + i].visible) {
							i++;
						}
						colIndex = cellPos.columnIndex + i;
						rowIndex = cellPos.rowIndex;
					}					
					if (colIndex > maxCol) {
						colIndex = 0;
						if (rowIndex == maxRow) {
							if (hasPermEdition()) 
								if (maxRow + 2 > 17) {
									Alert.show("Se pueden agregar un mÃ¡ximo de " + 17 + " lÃ­neas por documento." );
								} else {
									agregarLineaVenta();
								}
						} else {
							rowIndex += 1;
							
							currentLine = dgLineasVenta.dataProvider.getItemAt(rowIndex) as LineaDocumento;
						}
					}
					
					dgLineasVenta.setSelectedCell(rowIndex, colIndex);
					
				} else if ((event.keyCode >= Keyboard.A && event.keyCode <= Keyboard.Z) 
					|| (event.keyCode >= Keyboard.NUMBER_0 && event.keyCode <= Keyboard.NUMBER_9) 
					|| (event.keyCode >= Keyboard.NUMPAD_0 && event.keyCode <= Keyboard.NUMPAD_9) 
					|| event.keyCode == Keyboard.NUMPAD_DECIMAL 
					|| event.keyCode == Keyboard.PERIOD) {
					
					if (hasPermEdition()) {
						if ((dgLineasVenta.columns.getItemAt(cellPos.columnIndex) as GridColumn).editable) {
							dgLineasVenta.startItemEditorSession(cellPos.rowIndex, cellPos.columnIndex);
						}
					}
				}
			}
			
			private function agregarLineaVenta():void {
				var nueva:LineaDocumento = new LineaDocumento();
				nueva.documento = lineasVenta.documento;
				if (_deposito) {
					nueva.deposito = _deposito.codigo;
				}
				lineasVenta.lineas.addItem(nueva);
				
				currentLine = nueva;
				
				tieneCambios = true;
				
				callLater(function():void {
					var row:int = lineasVenta.lineas.length - 1;
					var col:int = 0;
					dgLineasVenta.selectedCell = new CellPosition(row, col);
				});
				
				
			}
			
			private function antecedentesCloseHandler(event:CloseEvent):void {
				helpWindow.removeEventListener(CloseEvent.CLOSE, antecedentesCloseHandler);
				PopUpManager.removePopUp(helpWindow as IFlexDisplayObject);
				dgLineasVenta.setFocus();
				
				helpWindow = null;
			}
			
			private function articulosCloseHandler(event:CloseEvent):void {
				helpWindow.removeEventListener(CloseEvent.CLOSE, articulosCloseHandler);
				articulosPnl.removeEventListener(CloseEvent.CLOSE, articulosCloseHandler);
<<<<<<< .mine
				
=======

>>>>>>> .r1064
				if (articulosPnl.articulo) {
					LineaDocumento(lineasVenta.lineas.getItemAt(cellPos.rowIndex)).elegirArticulo(articulosPnl.articulo);
				}
				articulosPnl = null;
<<<<<<< .mine
				
				PopUpManager.removePopUp(helpWindow as IFlexDisplayObject);
				helpWindow = null;
				dgLineasVenta.setFocus();
				
=======

				PopUpManager.removePopUp(helpWindow as IFlexDisplayObject);
				helpWindow = null;
				dgLineasVenta.setFocus();
				
>>>>>>> .r1064
			}
			
			private function closeHandler(event:CloseEvent):void {
				var frmDescuentos:FrmDescuentos = event.target as FrmDescuentos;
				LineaDocumento(lineasVenta.lineas.getItemAt(cellPos.rowIndex)).descuento = frmDescuentos.prcjeDto;
				
				helpWindow.removeEventListener(CloseEvent.CLOSE, closeHandler);
				PopUpManager.removePopUp(helpWindow as IFlexDisplayObject);
				dgLineasVenta.setFocus();
				
				helpWindow = null;
			}
			
			private function closePnlHandler(event:CloseEvent):void {
				event.target.removeEventListener(CloseEvent.CLOSE, closePnlHandler);
				PopUpManager.removePopUp(event.target as IFlexDisplayObject);
				dgLineasVenta.setFocus();
			}
			
			protected function cmdAceptar_clickHandler(event:MouseEvent):void {
				dispatchEvent(new CloseEvent(CloseEvent.CLOSE));
			}
			
			protected function cmdCancel_clickHandler(event:MouseEvent):void {
				dispatchEvent(new CloseEvent(CloseEvent.CLOSE));
			}
			
			protected function showHandler(event:FlexEvent):void {
				dgLineasVenta.setFocus();
			}
			
			protected function dgLineasVenta_gridItemEditorSessionSaveHandler(event:GridItemEditorEvent):void {
				var count:int = 0;
				var columns:ArrayCollection = new ArrayCollection(dgLineasVenta.columns.toArray());
				for each(var col:GridColumn in columns) {
					if (col.visible) {
						count++;
					}
				}					
				var maxColIndex:int = count - 2;
				var maxRowIndex:int = dgLineasVenta.dataProvider.length - 1;
				
				var colIndex:int = event.columnIndex;
				var rowIndex:int = event.rowIndex;
				
				if (colIndex + 1 > maxColIndex) {
					colIndex = 0;
					if (rowIndex < maxRowIndex) {
						rowIndex += 1;	
					}
				}
				if (colIndex == 0 || colIndex == 1) {
					currentLine.obtenerStock();
					//txtStock.text = currentLine.stockValue;
				}
				
				callLater(function():void {
					dgLineasVenta.setSelectedCell(rowIndex, colIndex + 1);
				});
				
				tieneCambios = true;
				
			}
			
			public function borrarLineaVenta():void {
				var rowIndex:int = dgLineasVenta.selectedCell.rowIndex;
				
				if (lineasVenta.lineas.length == 1) { // Tengo un solo elemento.
					lineasVenta.lineas.removeItemAt(rowIndex);
					
					// Agregar una linea vacia al documento
					var lineaDoc:LineaDocumento = new LineaDocumento();
					lineaDoc.articulo = null;
					lineaDoc.documento = _documento;
					
					lineasVenta.lineas.addItem(lineaDoc);
				} else {
					lineasVenta.lineas.removeItemAt(rowIndex);
					dgLineasVenta.invalidateDisplayList();
				}
				
				callLater(function():void {
					var maxIndex:int = dgLineasVenta.dataProvider.length - 1;
					if (dgLineasVenta.dataProvider.length >= 0) {
						if (rowIndex == 0) {
							dgLineasVenta.setSelectedCell(rowIndex, 0);
						} else if (rowIndex > maxIndex) {
							dgLineasVenta.setSelectedCell(maxIndex, 0);
						} else {
							dgLineasVenta.setSelectedCell(rowIndex, 0);
						}
					}
				});
				
				tieneCambios = true;
			}
			
			protected function dgLineasVenta_creationCompleteHandler(event:FlexEvent):void {
				dgLineasVenta.addEventListener("_mostrarAntecedentes", mostrarAntecedentes);
			}
			
			private function mostrarAntecedentes(event:Event):void {
				cellPos = dgLineasVenta.selectedCell;
				
				var lineaVenta:LineaDocumento = lineasVenta.lineas.getItemAt(cellPos.rowIndex) as LineaDocumento;
<<<<<<< .mine
				
				if (!lineaVenta.articulo || !lineaVenta.articulo.codigo || !documento.cliente.codigo) {
=======

				if (!lineaVenta.articulo || !lineaVenta.articulo.codigo || !documento.cliente.codigo) {
>>>>>>> .r1064
					return;
				}
<<<<<<< .mine
				
				if (helpWindow) {
					return;
				}
				
=======
				
				if (helpWindow) {
					return;
				}
					
>>>>>>> .r1064
				helpWindow = new TitleWindow();
				helpWindow.title = "Antecedentes";
				helpWindow.width = 1000;
				helpWindow.height = 500;
				
				var antecedentesPnl:AntecedentesPnl = new AntecedentesPnl();
				antecedentesPnl.articulo = lineaVenta.articulo.codigo;
				antecedentesPnl.cliente = _documento.cliente.codigo;
				antecedentesPnl.obtenerAntecedentes();
				
				PopUpManager.addPopUp(helpWindow, this.parentApplication.owner, true);
				PopUpManager.centerPopUp(helpWindow);
				
				helpWindow.addEventListener(CloseEvent.CLOSE, antecedentesCloseHandler);
				antecedentesPnl.addEventListener(CloseEvent.CLOSE, antecedentesCloseHandler);
				
				helpWindow.addElement(antecedentesPnl);
			}
			
			
			protected function dgLineasVenta_selectionChangeHandler(event:GridSelectionEvent):void {
				var rowIndex:int = event.selectionChange.rowIndex;
				
				currentLine = lineasVenta.lineas[rowIndex];
				if (_deposito) {
					currentLine.deposito = _deposito.codigo;
				}
				currentLine.obtenerStock();
				
				//txtStock.text = currentLine.stockValue;
			}
			
			private function hasPermEdition():Boolean {
				if (documento.nuevo) {
					return true;					
				} else if (!documento.permisosDocumentoUsuario.edicion) {
					return false;
				} else if (documento.emitido && GeneralOptions.getInstance().loggedUser.permisoId != Usuario.USUARIO_SUPERVISOR) {
					return false;
				}
				return true;
			}
			
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<s:NumberFormatter id="nf_Espanol_Espanol" locale="es_ES"/>
		<s:NumberFormatter id="nf_Espanol_Espanol2" fractionalDigits="2" locale="es_ES" />
	</fx:Declarations>
	
	<s:Panel width="100%" height="100%" styleName="pntLineasVenta">
		<s:VGroup width="100%" height="100%">
			<s:HGroup width="100%" height="100%" gap="0">
				<s:DataGrid id="dgLineasVenta" width="100%" height="100%" fontSize="10" creationComplete="dgLineasVenta_creationCompleteHandler(event)"
							keyDown="dg_keyDownHandler(event)" gridItemEditorSessionSave="dgLineasVenta_gridItemEditorSessionSaveHandler(event)"
							dataProvider="{lineasVenta.lineas}" selectionMode="singleCell" sortableColumns="false"
							selectionChange="dgLineasVenta_selectionChangeHandler(event)" editable="{hasPermEdition()}">
					<s:columns>
						<s:ArrayList>
							<s:GridColumn width="80" dataField="cantidad" headerText="Cantidad" editable="{hasPermEdition()}" rendererIsEditable="false" itemEditor="biz.fulltime.ui.forms.DGNumStepperEditor">
								<s:headerRenderer>
									<fx:Component>
										<s:DefaultGridHeaderRenderer width="100%" fontSize="11" fontWeight="bold" textJustify="distribute" textAlignLast="right">
											<fx:Script>
												<![CDATA[
													override public function prepare(hasBeenRecycled:Boolean):void {
														super.labelDisplay.setStyle("textAlign", "start");
														super.prepare(hasBeenRecycled);
													}
												]]>
											</fx:Script>
										</s:DefaultGridHeaderRenderer>
									</fx:Component>
								</s:headerRenderer>
								<s:itemRenderer>
									<fx:Component>
										<s:DefaultGridItemRenderer textAlign="right">
											<fx:Script>
												<![CDATA[
													import biz.fulltime.model.LineaDocumento;
													
													override public function prepare(hasBeenRecycled:Boolean):void {
														if (!data) {
															return;
														}
														label = outerDocument.nf_Espanol_Espanol2.format(LineaDocumento(data).getCantidad());
													}
												]]>
											</fx:Script>
										</s:DefaultGridItemRenderer>
									</fx:Component>
								</s:itemRenderer>
								
							</s:GridColumn>
							<s:GridColumn width="130" dataField="articulo" headerText="ArtÃ­culo" editable="{hasPermEdition()}">
								<s:headerRenderer>
									<fx:Component>
										<s:DefaultGridHeaderRenderer width="100%" fontSize="11" fontWeight="bold" textJustify="distribute" textAlignLast="right">
											<fx:Script>
												<![CDATA[
													override public function prepare(hasBeenRecycled:Boolean):void {
														super.labelDisplay.setStyle("textAlign", "start");
														super.prepare(hasBeenRecycled);
													}
												]]>
											</fx:Script>
										</s:DefaultGridHeaderRenderer>
									</fx:Component>
								</s:headerRenderer>
								<s:itemEditor>
									<fx:Component>
										<s:GridItemEditor>
											<fx:Script>
												<![CDATA[
													import biz.fulltime.model.Articulo;
													import biz.fulltime.model.LineaDocumento;
													
													import mx.events.FlexEvent;
													
													import spark.components.DataGrid;
													
													import util.CatalogoFactory;
													
													protected function acArticulo_creationCompleteHandler(event:FlexEvent):void {
														callLater(function():void {
															acArticulo.textInput.setFocus();
														});
														
													}
													
													override public function get value():Object {
														return acArticulo.selectedItem;
													}
													
													override public function set value(newValue:Object):void {
														acArticulo.selectedItem = newValue;
													}
													
													
													public function codigoNombreLabelFunction(item:Object):String {
														var label:String;
														
														if (item && item.hasOwnProperty("codigo")) {
															label = item.codigo;
														}
														if (item && item.hasOwnProperty("nombre")) {
															label += " - " + item.nombre;
														}
														if (item && item.hasOwnProperty("codigoOrigen")) {
															label += (item.codigoOrigen && item.codigoOrigen.length > 0) ? (" [" + item.codigoOrigen + "]") : "";
														}
														return label;
													}
													
													protected function acArticulo_keyDownHandler(event:KeyboardEvent):void {
														if (event.keyCode == Keyboard.F1 || event.keyCode == Keyboard.F2) {
															if (!acArticulo.isPopUp) {
																DataGrid(owner).endItemEditorSession();
															}
														}
													}
													
													/**
													 *  @private
													 */
													override public function setFocus():void {
														acArticulo.setFocus();
													}
													
													protected function acArticulo_changeHandler(event:Event):void {
														var articulo:Articulo = acArticulo.selectedItem as Articulo;
														if (articulo != null) {
															LineaDocumento(data).elegirArticulo(articulo);
														} else {
															LineaDocumento(data).stock = BigDecimal.ZERO;	
														}
														
													}
													
												]]>
											</fx:Script>
											<components1:MyAutoComplete id="acArticulo" width="100%" creationComplete="acArticulo_creationCompleteHandler(event)" 
																		keyDown="acArticulo_keyDownHandler(event)" dataProvider="{ CatalogoFactory.getInstance().articulos }"
																		matchType="anyPart" selectedItemStyleName="underline" allowMultipleSelection="false" labelField="nombre"
																		labelFunction="codigoNombreLabelFunction" backspaceAction="remove" allowNewValues="false" dropDownWidth="460"
																		dropDownRowCount="10" toolTip="{acArticulo.text}" change="acArticulo_changeHandler(event)"/>
										</s:GridItemEditor>
									</fx:Component>
								</s:itemEditor>
								<s:itemRenderer>
									<fx:Component>
										<s:DefaultGridItemRenderer textAlign="left" fontSize="11">
											<fx:Script>
												<![CDATA[
													import biz.fulltime.model.Articulo;
													import biz.fulltime.model.LineaDocumento;
													
													override public function prepare(hasBeenRecycled:Boolean):void {
														if (!data) {
															return;
														}
														
														
														var linea:LineaDocumento = LineaDocumento(data);
														linea.addEventListener("changeStock", function():void {
															if (!linea.hasStock) {
																setStyle("color", "#ff0000");
																setStyle("fontWeight", "bold");
															} else {
																setStyle("color", "#000000");
																setStyle("fontWeight", "normal");
															}
														});
														
														if (!linea.hasStock) {
															setStyle("color", "#ff0000");
															setStyle("fontWeight", "bold");
														} else {
															setStyle("color", "#000000");
															setStyle("fontWeight", "normal");
														}
														
														var art:String = data.articulo ? data.articulo.codigo : "";
														
														if (art) {
															label = art;
														}
													}
												]]>
											</fx:Script>
										</s:DefaultGridItemRenderer>
									</fx:Component>
								</s:itemRenderer>
							</s:GridColumn>
							<s:GridColumn dataField="concepto" headerText="DescripciÃ³n" editable="{hasPermEdition()}">
								<s:headerRenderer>
									<fx:Component>
										<s:DefaultGridHeaderRenderer width="100%" fontSize="11" fontWeight="bold" textJustify="distribute" textAlignLast="right">
											<fx:Script>
												<![CDATA[
													override public function prepare(hasBeenRecycled:Boolean):void {
														super.labelDisplay.setStyle("textAlign", "start");
														
														super.prepare(hasBeenRecycled);
													}
												]]>
											</fx:Script>
										</s:DefaultGridHeaderRenderer>
									</fx:Component>
								</s:headerRenderer>
								
								<s:itemRenderer>
									<fx:Component>
										<s:DefaultGridItemRenderer textAlign="left" fontSize="11" verticalCenter="0">
											<fx:Script>
												<![CDATA[
													import biz.fulltime.model.LineaDocumento;
													
													override public function prepare(hasBeenRecycled:Boolean):void {
														if (!data) {
															return;
														}
														var linea:LineaDocumento = LineaDocumento(data);
														if (!linea.hasStock) {
															setStyle("color", "#ff0000");
															setStyle("fontWeight", "bold");
														} else {
															setStyle("color", "#000000");
															setStyle("fontWeight", "normal");
														}
													}
												]]>
											</fx:Script>
										</s:DefaultGridItemRenderer>
										
									</fx:Component>
								</s:itemRenderer>
								
								<s:itemEditor>
									<fx:Component>
										<s:DefaultGridItemEditor>
											<fx:Script>
												<![CDATA[
													import spark.components.DataGrid;
													
													override protected function keyDownHandler(event:KeyboardEvent):void {
														if ((value as String).length >= 50) {
															event.preventDefault();
														}
														if (event.keyCode == Keyboard.F1 || event.keyCode == Keyboard.F2) {
															DataGrid(owner).endItemEditorSession();
															DataGrid(owner).dispatchEvent(new Event("_mostrarAntecedentes"));
														}														
														
													}
												]]>
											</fx:Script>
										</s:DefaultGridItemEditor>
									</fx:Component>
								</s:itemEditor>
							</s:GridColumn>
							<s:GridColumn width="80" dataField="precio" headerText="P. Unitario" editable="{hasPermEdition()}" itemEditor="biz.fulltime.ui.forms.DGNumberEditor">
								<s:headerRenderer>
									<fx:Component>
										<s:DefaultGridHeaderRenderer width="100%" fontSize="11" fontWeight="bold" textJustify="distribute" textAlignLast="right">
											<fx:Script>
												<![CDATA[
													override public function prepare(hasBeenRecycled:Boolean):void {
														super.labelDisplay.setStyle("textAlign", "end");
														super.prepare(hasBeenRecycled);
													}
												]]>
											</fx:Script>
										</s:DefaultGridHeaderRenderer>
									</fx:Component>
								</s:headerRenderer>
								<s:itemRenderer>
									<fx:Component>
										<s:DefaultGridItemRenderer textAlign="right">
											<fx:Script>
												<![CDATA[
													import biz.fulltime.model.LineaDocumento;
													
													override public function prepare(hasBeenRecycled:Boolean):void {
														if (!data) {
															return;
														}
														label = outerDocument.nf_Espanol_Espanol.format(LineaDocumento(data).getPrecio());
													}
												]]>
											</fx:Script>
										</s:DefaultGridItemRenderer>
									</fx:Component>
								</s:itemRenderer>
							</s:GridColumn>
							
							<s:GridColumn width="80" dataField="precioDistribuidor" headerText="Base Dist." visible="{hay_vendedor_dist || GeneralOptions.getInstance().loggedUser.usuarioModoDistribuidor}" editable="{(!documento.emitido || GeneralOptions.getInstance().loggedUser.permisoId == Usuario.USUARIO_SUPERVISOR) &amp;&amp; !GeneralOptions.getInstance().loggedUser.usuarioModoDistribuidor}" itemEditor="biz.fulltime.ui.forms.DGNumberEditor">
								<s:headerRenderer>
									<fx:Component>
										<s:DefaultGridHeaderRenderer width="100%" fontSize="11" fontWeight="bold" textJustify="distribute" textAlignLast="right">
											<fx:Script>
												<![CDATA[
													override public function prepare(hasBeenRecycled:Boolean):void {
														super.labelDisplay.setStyle("textAlign", "end");
														super.prepare(hasBeenRecycled);
													}
												]]>
											</fx:Script>
										</s:DefaultGridHeaderRenderer>
									</fx:Component>
								</s:headerRenderer>
								<s:itemRenderer>
									<fx:Component>
										<s:DefaultGridItemRenderer textAlign="right">
											<fx:Script>
												<![CDATA[
													import biz.fulltime.model.LineaDocumento;
													
													override public function prepare(hasBeenRecycled:Boolean):void {
														if (!data) {
															return;
														}
														label = outerDocument.nf_Espanol_Espanol.format(LineaDocumento(data).getPrecioBaseDistribuidor());
													}
												]]>
											</fx:Script>
										</s:DefaultGridItemRenderer>
									</fx:Component>
								</s:itemRenderer>
							</s:GridColumn>
							
							<s:GridColumn width="50" dataField="descuento" headerText="Dcto." itemEditor="biz.fulltime.ui.forms.DGNumberEditor" editable="{hasPermEdition()}">
								<s:headerRenderer>
									<fx:Component>
										<s:DefaultGridHeaderRenderer width="100%" fontSize="11" fontWeight="bold" textJustify="distribute" textAlignLast="right">
											<fx:Script>
												<![CDATA[
													override public function prepare(hasBeenRecycled:Boolean):void {
														super.labelDisplay.setStyle("textAlign", "end");
														super.prepare(hasBeenRecycled);
													}
												]]>
											</fx:Script>
										</s:DefaultGridHeaderRenderer>
									</fx:Component>
								</s:headerRenderer>
								<s:itemRenderer>
									<fx:Component>
										<s:DefaultGridItemRenderer textAlign="right">
											<fx:Script>
												<![CDATA[
													import biz.fulltime.model.LineaDocumento;
													
													override public function prepare(hasBeenRecycled:Boolean):void {
														if (!data) {
															return;
														}
														if (data.descuento != null) {
															label = LineaDocumento(data).getDescuento().setScale(0, MathContext.ROUND_UP).toString() + "%";
														} else {
															label = '';
														}
													}
												]]>
											</fx:Script>
										</s:DefaultGridItemRenderer>
									</fx:Component>
								</s:itemRenderer>
							</s:GridColumn>
							<s:GridColumn width="80" headerText="Importe" editable="false" itemEditor="biz.fulltime.ui.forms.DGNumberEditor">
								<s:headerRenderer>
									<fx:Component>
										<s:DefaultGridHeaderRenderer width="100%" fontSize="11" fontWeight="bold" textJustify="distribute" textAlignLast="right">
											<fx:Script>
												<![CDATA[
													override public function prepare(hasBeenRecycled:Boolean):void {
														super.labelDisplay.setStyle("textAlign", "end");
														super.prepare(hasBeenRecycled);
													}
												]]>
											</fx:Script>
										</s:DefaultGridHeaderRenderer>
									</fx:Component>
								</s:headerRenderer>
								<s:itemRenderer>
									<fx:Component>
										<s:DefaultGridItemRenderer textAlign="right">
											<fx:Script>
												<![CDATA[
													import biz.fulltime.model.LineaDocumento;
													
													override public function prepare(hasBeenRecycled:Boolean):void {
														if (!data) {
															return;
														}
														var importe:BigDecimal = LineaDocumento(data).getSubTotal();
														
														label = outerDocument.nf_Espanol_Espanol.format(importe);
														
													}
												]]>
											</fx:Script>
										</s:DefaultGridItemRenderer>
									</fx:Component>
								</s:itemRenderer>
							</s:GridColumn>
							<s:GridColumn width="75" dataField="valorNeto" headerText="Neto" editable="{hasPermEdition()}" visible="{!GeneralOptions.getInstance().loggedUser.usuarioModoDistribuidor}" itemEditor="biz.fulltime.ui.forms.DGNumberEditor">
								<s:headerRenderer>
									<fx:Component>
										<s:DefaultGridHeaderRenderer width="100%" fontSize="11" fontWeight="bold" textJustify="distribute" textAlignLast="right">
											<fx:Script>
												<![CDATA[
													override public function prepare(hasBeenRecycled:Boolean):void {
														super.labelDisplay.setStyle("textAlign", "end");
														super.prepare(hasBeenRecycled);
													}
												]]>
											</fx:Script>
										</s:DefaultGridHeaderRenderer>
									</fx:Component>
								</s:headerRenderer>
								<s:itemRenderer>
									<fx:Component>
										<s:DefaultGridItemRenderer textAlign="right">
											<fx:Script>
												<![CDATA[
													import biz.fulltime.model.LineaDocumento;
													
													override public function prepare(hasBeenRecycled:Boolean):void {
														if (!data) {
															return;
														}
														label = outerDocument.nf_Espanol_Espanol.format(LineaDocumento(data).valorNeto);
													}
												]]>
											</fx:Script>
										</s:DefaultGridItemRenderer>
									</fx:Component>
								</s:itemRenderer>
							</s:GridColumn>
							<s:GridColumn width="75" dataField="costo" headerText="Costo" visible="{!GeneralOptions.getInstance().loggedUser.usuarioModoDistribuidor}" editable="{(!documento.emitido || GeneralOptions.getInstance().loggedUser.permisoId == Usuario.USUARIO_SUPERVISOR) &amp;&amp; !GeneralOptions.getInstance().loggedUser.usuarioModoDistribuidor &amp;&amp; !GeneralOptions.getInstance().loggedUser.usuarioModoMostrador}" itemEditor="biz.fulltime.ui.forms.DGNumberEditor">
								<s:headerRenderer>
									<fx:Component>
										<s:DefaultGridHeaderRenderer width="100%" fontSize="11" fontWeight="bold" textJustify="distribute" textAlignLast="right">
											<fx:Script>
												<![CDATA[
													override public function prepare(hasBeenRecycled:Boolean):void {
														super.labelDisplay.setStyle("textAlign", "end");
														super.prepare(hasBeenRecycled);
													}
												]]>
											</fx:Script>
										</s:DefaultGridHeaderRenderer>
									</fx:Component>
								</s:headerRenderer>
								<s:itemRenderer>
									<fx:Component>
										<s:DefaultGridItemRenderer textAlign="right">
											<fx:Script>
												<![CDATA[
													import biz.fulltime.conf.GeneralOptions;
													import biz.fulltime.model.Documento;
													import biz.fulltime.model.LineaDocumento;
													import biz.fulltime.model.Usuario;
													
													override public function prepare(hasBeenRecycled:Boolean):void {
														if (!data) {
															return;
														}
														
														var doc:Documento = outerDocument.documento;
														
														if (!GeneralOptions.getInstance().modoMostrador && (doc.nuevo || doc.permisosDocumentoUsuario.rentaDistribuidor || doc.permisosDocumentoUsuario.rentaReal)) {
															label = outerDocument.nf_Espanol_Espanol.format(LineaDocumento(data).costo);
														} else {
															label = "";
															var largo:int = LineaDocumento(data).costo.toString().length;
															for (var i:Number = 0; i < largo; i++) {
																label += "*";
															}															
														}
													}
												]]>
											</fx:Script>
										</s:DefaultGridItemRenderer>
									</fx:Component>
								</s:itemRenderer>
							</s:GridColumn>
							
							<s:GridColumn width="60" headerText="%U.Dist" editable="false" visible="{hay_vendedor_dist &amp;&amp; !GeneralOptions.getInstance().modoMostrador &amp;&amp; (documento.nuevo || documento.permisosDocumentoUsuario.rentaDistribuidor || documento.permisosDocumentoUsuario.rentaReal)}">
								<s:headerRenderer>
									<fx:Component>
										<s:DefaultGridHeaderRenderer width="70" fontSize="11" fontWeight="bold" textJustify="distribute" textAlignLast="right">
											<fx:Script>
												<![CDATA[
													override public function prepare(hasBeenRecycled:Boolean):void {
														super.labelDisplay.setStyle("textAlign", "end");
														super.prepare(hasBeenRecycled);
													}
												]]>
											</fx:Script>
										</s:DefaultGridHeaderRenderer>
									</fx:Component>
								</s:headerRenderer>
								<s:itemRenderer>
									<fx:Component>
										<s:DefaultGridItemRenderer color="0x734669" fontStyle="italic" fontWeight="bold" textAlign="right">
											<fx:Script>
												<![CDATA[
													import biz.fulltime.model.LineaDocumento;
													
													override public function prepare(hasBeenRecycled:Boolean):void {
														if (!data) {
															return;
														}
														var porcentajeUtilidad:BigDecimal = LineaDocumento(data).getPorcentajeUtilidadDistribuidor();
														
														var utility:BigDecimal;
														if (porcentajeUtilidad) {															
															utility = porcentajeUtilidad.setScale(2, MathContext.ROUND_HALF_UP);
														} else {
															utility = BigDecimal.ZERO;
														}
														
														label = outerDocument.nf_Espanol_Espanol.format(utility) + "%";
													}
												]]>
											</fx:Script>
										</s:DefaultGridItemRenderer>
									</fx:Component>
								</s:itemRenderer>
							</s:GridColumn>
							
							<s:GridColumn width="60" headerText="{hay_vendedor_dist  ? '%U.Fulltime' : '%Utilidad'}" editable="false" visible="{!GeneralOptions.getInstance().loggedUser.usuarioModoDistribuidor &amp;&amp; !GeneralOptions.getInstance().modoMostrador &amp;&amp; (documento.nuevo || documento.permisosDocumentoUsuario.rentaDistribuidor || documento.permisosDocumentoUsuario.rentaReal)}">
								<s:headerRenderer>
									<fx:Component>
										<s:DefaultGridHeaderRenderer width="70" fontSize="11" fontWeight="bold" textJustify="distribute" textAlignLast="right">
											<fx:Script>
												<![CDATA[
													override public function prepare(hasBeenRecycled:Boolean):void {
														super.labelDisplay.setStyle("textAlign", "end");
														super.prepare(hasBeenRecycled);
													}
												]]>
											</fx:Script>
										</s:DefaultGridHeaderRenderer>
									</fx:Component>
								</s:headerRenderer>
								<s:itemRenderer>
									<fx:Component>
										<s:DefaultGridItemRenderer color="0x734669" fontStyle="italic" fontWeight="bold" textAlign="right">
											<fx:Script>
												<![CDATA[
													import biz.fulltime.model.LineaDocumento;
													
													override public function prepare(hasBeenRecycled:Boolean):void {
														if (!data) {
															return;
														}														
														var porcentajeUtilidad:BigDecimal = outerDocument.hay_vendedor_dist ? LineaDocumento(data).getPorcentajeUtilidadFulltime() : LineaDocumento(data).getPorcentajeUtilidad();
														
														var utility:BigDecimal;
														if (porcentajeUtilidad) {															
															utility = porcentajeUtilidad.setScale(2, MathContext.ROUND_HALF_UP);
														} else {
															utility = BigDecimal.ZERO;
														}
														
														label = outerDocument.nf_Espanol_Espanol.format(utility) + "%";
													}
												]]>
											</fx:Script>
										</s:DefaultGridItemRenderer>
									</fx:Component>
								</s:itemRenderer>
							</s:GridColumn>
							
							<s:GridColumn width="34" headerText="" rendererIsEditable="true" visible="{!documento.emitido || GeneralOptions.getInstance().loggedUser.permisoId == Usuario.USUARIO_SUPERVISOR}">
								<s:itemRenderer>
									<fx:Component>
										<s:GridItemRenderer>
											<fx:Script>
												<![CDATA[
													import mx.controls.Alert;
													import mx.events.CloseEvent;
													
													protected function cmdRemove_clickHandler(event:MouseEvent):void {
														Alert.show("Â¿Esta usted seguro?", "Borrar LÃ­nea de Venta", Alert.YES + Alert.NO, null, myCloseHandler);
													}
													
													private function myCloseHandler(event:CloseEvent):void {
														if (event.detail == Alert.YES) {
															this.outerDocument.borrarLineaVenta();
														}
														
													}
												]]>
											</fx:Script>
											
											<s:VGroup width="100%" height="100%" horizontalAlign="center" paddingLeft="2" verticalAlign="middle" creationComplete="cmdRemove.setFocus()">
												<s:Button id="cmdRemove" width="100%" height="100%" icon="@Embed('/assets/general/trash.png')" click="cmdRemove_clickHandler(event)" />
											</s:VGroup>
										</s:GridItemRenderer>
									</fx:Component>
								</s:itemRenderer>
							</s:GridColumn>
							
						</s:ArrayList>
					</s:columns>
				</s:DataGrid>
			</s:HGroup>
			
			<s:Group height="45">
				<s:Rect top="5" left="5" bottom="5" right="5"
						bottomLeftRadiusX="7" bottomLeftRadiusY="7" bottomRightRadiusX="7" bottomRightRadiusY="7"
						topLeftRadiusX="7" topLeftRadiusY="7" topRightRadiusX="7" topRightRadiusY="7">
					<s:fill>
						<s:LinearGradient rotation="-90">
							<s:GradientEntry id="ge1" color="{currentLine.hasStock ? 0x00ff00 : 0xff0000}" alpha=".1"/>
							<s:GradientEntry id="ge2" color="{currentLine.hasStock ? 0xffffff : 0xffffff}" ratio="0.21" alpha=".2"/>
							<s:GradientEntry id="ge3" color="{currentLine.hasStock ? 0xffffff : 0xffffff}" ratio="0.81" alpha=".2"/>
							<s:GradientEntry id="ge4" color="{currentLine.hasStock ? 0x00ff00 : 0xff0000}" alpha=".1"/>
						</s:LinearGradient> 
					</s:fill>
					<s:stroke>
						<!--- @private -->
						<s:SolidColorStroke id="borderStroke" weight="1" color="{currentLine.hasStock ? 0x00ff00 : 0xff0000}"/>
					</s:stroke>
					
				</s:Rect>
				<s:HGroup height="100%" paddingLeft="10" paddingTop="10" paddingBottom="10" paddingRight="10" horizontalAlign="left" verticalAlign="middle" gap="6">
					<s:Label text="Stock:" fontWeight="bold" visible="{currentLine.stockValue.length > 0}" includeInLayout="{currentLine.stockValue.length > 0}"/>
					<s:Label text="Sin control de stock." fontWeight="bold" visible="{currentLine.stockValue.length == 0}" includeInLayout="{currentLine.stockValue.length == 0}"/>
					<s:Label id="txtStock" text="{nf_Espanol_Espanol.format(currentLine.stockValue)}" fontWeight="bold" fontSize="12" visible="{currentLine.stockValue.length > 0}" includeInLayout="{currentLine.stockValue.length > 0}"/>
					<s:Label text="unidades." fontWeight="bold" fontSize="12" color="#000000" visible="{currentLine.stockValue.length > 0}" includeInLayout="{currentLine.stockValue.length > 0}"/>
					
					
					<s:Label text="Faltan" fontWeight="bold" fontSize="12" color="#000000" visible="{!currentLine.hasStock}" includeInLayout="{!currentLine.hasStock}"/>
					<s:Label text="{currentLine.getStockFaltante()}" fontWeight="bold" fontSize="12" color="#000000" visible="{!currentLine.hasStock}" includeInLayout="{!currentLine.hasStock}"/>
					<s:Label text="unidades." fontWeight="bold" fontSize="12" color="#000000" visible="{!currentLine.hasStock}" includeInLayout="{!currentLine.hasStock}"/>
				</s:HGroup>
			</s:Group>
		</s:VGroup>
		
		
		<s:controlBarContent>
			<s:HGroup width="100%" horizontalAlign="right" paddingBottom="0" paddingTop="0">
				<mx:Image id="loader1" source="@Embed(source='assets/general/logo_oscuro.gif')" alpha=".5" scaleX=".25" scaleY=".25"/>
				<s:Spacer width="100%" />
				<s:Button id="cmdAceptar" click="cmdAceptar_clickHandler(event)" label="Aceptar" styleName="aceptarButton" />
				
			</s:HGroup>
		</s:controlBarContent>
	</s:Panel>
	
</s:HGroup>
