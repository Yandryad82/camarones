<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:components="components.*" xmlns:facturacion="biz.fulltime.ui.facturacion.*" xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:s="library://ns.adobe.com/flex/spark"
		  width="100%" height="100%" preinitialize="init()">
	
	<fx:Script>
		<![CDATA[
			import biz.fulltime.conf.ServerConfig;
			import biz.fulltime.event.AbrirFacturaEvent;
			import biz.fulltime.model.ArticuloCompraVentaCosto;
			import biz.fulltime.model.Moneda;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.IFlexDisplayObject;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.formatters.DateFormatter;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.remoting.RemoteObject;
			
			import util.CatalogoFactory;
												
			private var _comprasPlaza:ArrayCollection = new ArrayCollection();
			
			public function init():void {				
			}
			
			[Bindable]
			public function get comprasPlaza():ArrayCollection {
				return _comprasPlaza;
			}
			
			public function set comprasPlaza(value:ArrayCollection):void {
				_comprasPlaza = value;
			}
			
			private function closeHandler(event:Event):void {
				event.target.removeEventListener("close", closeHandler);
				PopUpManager.removePopUp(event.target as IFlexDisplayObject);
			}
			
			protected function cmdCancel_clickHandler(event:MouseEvent):void {
				dispatchEvent(new Event("_close_documento"));
			}
			
			
			/**
			 *  Al dar enter hacer lo mismo que al precionar el boton editar
			 */
			protected function dgComprasPlaza_keyDownHandler(event:KeyboardEvent):void {
				// Editar una factura existente
				if (event.keyCode == Keyboard.ENTER) {
					// cargarFactura();
				} else if (event.keyCode == Keyboard.TAB) {
					event.preventDefault();
				}
			}		
									
			private function date_labelFunction(item:Object, column:GridColumn):String {
				var dateFormatter:DateFormatter = new DateFormatter();
				dateFormatter.formatString = "DD-MM-YYYY";
				
				return dateFormatter.format(item.fecha);
			}
			
			private function cliente_labelFunction(item:Object, column:GridColumn):String {
				return item.cliente.codigo + " - " + item.cliente.nombre;
			}
			
			private function moneda_labelFunction(item:Object, column:GridColumn):String {
				return item.moneda.codigo + " - " + item.moneda.nombre;
			}
			
			private function comprobante_labelFunction(item:Object, column:GridColumn):String {
				return item.comprobante.nombre;
			}
			
			private function comprobante_cod_labelFunction(item:Object, column:GridColumn):String {
				return item.comprobante.codigo + " - " + item.comprobante.nombre;
			}
			
			public function refrescar():void {
			}
			
			protected function onAddedToStageHandler(event:Event):void {
				refrescar();
			}
			
			protected function pnlFilters_creationCompleteHandler(event:FlexEvent):void {
				pnlFilters.addEventListener("_changeComprasPlaza" , filtrarDocumentos);
			}
			
			private function filtrarDocumentos(event:Event):void {
				comprasPlaza = pnlFilters.lineasCompraPlaza;
 			}
			
			
			//--------------------------------------------------------------------------
			//
			//  Overridden methods: UIComponent
			//
			//--------------------------------------------------------------------------
			
			/**
			 *  @private
			 */
			override protected function commitProperties():void {
				super.commitProperties();
				
			}
			
			protected function cmdSelectAll_clickHandler(event:MouseEvent):void {
				for each (var linea:ArticuloCompraVentaCosto in comprasPlaza) {
					linea.selected = true;
				}
				
			}
			
			protected function cmdUnselectAll_clickHandler(event:MouseEvent):void {
				for each (var linea:ArticuloCompraVentaCosto in comprasPlaza) {
					linea.selected = false;
				}
			}
												
			public function abrirCompraPlaza(docId:String):void {
				dispatchEvent(new AbrirFacturaEvent(AbrirFacturaEvent.ABRIR_DOCUMENTO, docId));
			}
			
			private function percentageFormat(item:Object, column:GridColumn):String {				
				return  numberFormatter.format(item[column.dataField]) + "%" ;
			}
			
			private function numberFormat(item:Object, column:GridColumn):String {
				var monedaId:String = item[column.dataField == "costoCompra" ? "compraMonedaId" : (column.dataField == "costoVenta" ? "ventaMonedaId" : "fichaMonedaId")];
				
				for each(var moneda:Moneda in CatalogoFactory.getInstance().getMonedas(false)) {
					if (monedaId == moneda.codigo) {
						return  moneda.simbolo + " " + numberFormatter.format(item[column.dataField]);
					}
				}
				return numberFormatter.format(item [column.dataField]);
				
			}
			
			protected function cmdActualizarCostos_clickHandler(event:MouseEvent):void {
				var remObj:RemoteObject = new RemoteObject();
				remObj.destination = "CreatingRpc";
				remObj.showBusyCursor = true;
				remObj.channelSet = ServerConfig.getInstance().channelSet;
				remObj.addEventListener(ResultEvent.RESULT, onResult);
				remObj.addEventListener(FaultEvent.FAULT, onFault);
				
				var result:ArrayCollection = new ArrayCollection();
				for each (var i:ArticuloCompraVentaCosto in comprasPlaza) {
					if (i.selected) {
						result.addItem(i);	
					}					
				}			
				if (result.length > 0) {
					remObj.actualizarArticulosCompraVenta(result);
				}
			}
			
			private function onResult(event:ResultEvent):void {
				pnlFilters.loadLines();	
			}
			
			private function onFault(event:FaultEvent):void {
				Alert.show(event.fault.faultString, 'Error');
			}
			

			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<s:ArrayList id="cols">
			<s:GridColumn width="32" dataField="selected" headerText="">
				<s:itemRenderer>
					<fx:Component>
						<s:GridItemRenderer>
							<fx:Script>
								<![CDATA[
									import biz.fulltime.model.ArticuloCompraVentaCosto;
									
									protected function checkBox_changeHandler(event:Event):void {
										ArticuloCompraVentaCosto(data).selected = checkBox.selected;
									}
								]]>
							</fx:Script>
							
							<s:VGroup width="100%" height="100%" horizontalAlign="center" paddingBottom="2" paddingLeft="2" paddingRight="2" paddingTop="2" verticalAlign="middle">
								<s:CheckBox id="checkBox" x="5" y="5" verticalCenter="0" change="checkBox_changeHandler(event)" selected="{ArticuloCompraVentaCosto(data).selected}" />
							</s:VGroup>
						</s:GridItemRenderer>
						
					</fx:Component>
				</s:itemRenderer>
			</s:GridColumn>
			<s:GridColumn headerText="ID PRODUCTO" dataField="codigo" width="100"/>
			
			<s:GridColumn headerText="NOMBRE PRODUCTO" dataField="nombre" />
			
			<s:GridColumn headerText="COMPR. COMPRA" dataField="comprobanteCompra" width="110">
				<s:itemRenderer>
					<fx:Component>
						<s:GridItemRenderer clipAndEnableScrolling="true">
							<fx:Script>
								<![CDATA[
									override public function prepare(hasBeenRecycled:Boolean):void {
										if(this.data) {											
										}
									}
								]]>
							</fx:Script>
							<s:Label id="labelDisplay" fontSize="12" top="8" left="7"/>
						</s:GridItemRenderer>
					</fx:Component>
				</s:itemRenderer>
			</s:GridColumn>
			<s:GridColumn headerText="COMPR. VENTA" dataField="comprobanteVenta" width="100">
				<s:itemRenderer>
					<fx:Component>
						<s:GridItemRenderer clipAndEnableScrolling="true">
							<fx:Script>
								<![CDATA[
									override public function prepare(hasBeenRecycled:Boolean):void {
										if(this.data) {											
										}
									}
								]]>
							</fx:Script>
							<s:Label id="labelDisplay" fontSize="12" top="8" left="7"/>
						</s:GridItemRenderer>
					</fx:Component>
				</s:itemRenderer>
			</s:GridColumn>

			<s:GridColumn headerText="COSTO LÍNEA COMPRA" dataField="costoCompraSinDescuentos" width="110" labelFunction="numberFormat">
				<s:itemRenderer>
					<fx:Component>
						<s:GridItemRenderer clipAndEnableScrolling="true">
							<fx:Script>
								<![CDATA[
									override public function prepare(hasBeenRecycled:Boolean):void {
										if(this.data) {											
											if (Number(this.data.costoCompra) == Number(this.data.costoCompra)) {
												labelDisplay.setStyle("color", 0x000000);
											} else {
												labelDisplay.setStyle("color", 0xff0000);
											}
										}
									}
								]]>
							</fx:Script>
							<s:Rect top="0" bottom="0" left="0" right="0">
								<s:fill>
									<s:SolidColor id="bgColor" color="0xDADADA" alpha="0.5"/>
								</s:fill>
							</s:Rect>
							<s:Label id="labelDisplay" fontSize="12" top="8" right="7"/>
						</s:GridItemRenderer>
					</fx:Component>
				</s:itemRenderer>
			</s:GridColumn>
			<s:GridColumn headerText="DCTO." dataField="costoCompraDescuento" width="60" labelFunction="percentageFormat">
				<s:itemRenderer>
					<fx:Component>
						<s:GridItemRenderer clipAndEnableScrolling="true">
							<fx:Script>
								<![CDATA[
									override public function prepare(hasBeenRecycled:Boolean):void {
										if(this.data) {											
										}
									}
								]]>
							</fx:Script>
							<s:Rect top="0" bottom="0" left="0" right="0">
								<s:fill>
									<s:SolidColor id="bgColor" color="0xDADADA" alpha="0.5"/>
								</s:fill>
							</s:Rect>
							<s:Label id="labelDisplay" fontSize="12" top="8" right="7"/>
						</s:GridItemRenderer>
					</fx:Component>
				</s:itemRenderer>
			</s:GridColumn>
			<s:GridColumn headerText="COSTO COMPRA" dataField="costoCompra" width="110" labelFunction="numberFormat" >
				<s:itemRenderer>
					<fx:Component>
						<s:GridItemRenderer clipAndEnableScrolling="true">
							<fx:Script>
								<![CDATA[
									override public function prepare(hasBeenRecycled:Boolean):void {
										if(this.data) {											
										}
									}
								]]>
							</fx:Script>
							<s:Rect top="0" bottom="0" left="0" right="0">
								<s:fill>
									<s:SolidColor id="bgColor" color="0xDADADA" alpha="0.5"/>
								</s:fill>
							</s:Rect>
							<s:Label id="labelDisplay" fontSize="12" top="8" right="7"/>
						</s:GridItemRenderer>
					</fx:Component>
				</s:itemRenderer>
			</s:GridColumn>
			<s:GridColumn headerText="COSTO FICHA" dataField="costo" width="110" labelFunction="numberFormat">
				<s:itemRenderer>
					<fx:Component>
						<s:GridItemRenderer clipAndEnableScrolling="true">
							<fx:Script>
								<![CDATA[
									override public function prepare(hasBeenRecycled:Boolean):void {
										if(this.data) {											
											if (Number(this.data.costoCompra) == Number(this.data.costo)) {
												labelDisplay.setStyle("color", "#000000");
											} else {
												labelDisplay.setStyle("color", "#ff0000");
											}
										}
									}
								]]>
							</fx:Script>
							<s:Rect top="0" bottom="0" left="0" right="0">
								<s:fill>
									<s:SolidColor id="bgColor" color="0xFFFFDA" alpha="0.5"/>
								</s:fill>
							</s:Rect>
							<s:Label id="labelDisplay" fontSize="12" top="8" right="7"/>
						</s:GridItemRenderer>
					</fx:Component>
				</s:itemRenderer>
			</s:GridColumn>
			<s:GridColumn headerText="COSTO VENTA" dataField="costoVenta" width="100" labelFunction="numberFormat">
				<s:itemRenderer>
					<fx:Component>
						<s:GridItemRenderer clipAndEnableScrolling="true">
							<fx:Script>
								<![CDATA[
									override public function prepare(hasBeenRecycled:Boolean):void {
										if(this.data) {											
											if (Number(this.data.costoCompra) == Number(this.data.costoVenta)) {
												labelDisplay.setStyle("color", "#000000");
											} else {
												labelDisplay.setStyle("color", "#ff0000");
											}
										}
									}
								]]>
							</fx:Script>
							<s:Rect top="0" bottom="0" left="0" right="0">
								<s:fill>
									<s:SolidColor id="bgColor" color="0xDAFFDA" alpha="0.5"/>
								</s:fill>
							</s:Rect>
							<s:Label id="labelDisplay" fontSize="12" top="8" right="7"/>
						</s:GridItemRenderer>
					</fx:Component>
				</s:itemRenderer>
			</s:GridColumn>
			<s:GridColumn width="32" headerText="">
				<s:itemRenderer>
					<fx:Component>
						<s:GridItemRenderer>
							<fx:Script>
								<![CDATA[
									import biz.fulltime.model.ArticuloCompraVentaCosto;
									
									protected function cmdAbrir_clickHandler(event:MouseEvent):void {
										var docId:String = ArticuloCompraVentaCosto(data).docVentaId;
										
										outerDocument.abrirCompraPlaza(docId);
									}
								]]>
							</fx:Script>
							
							<s:VGroup width="100%" height="100%" horizontalAlign="center" paddingBottom="2" paddingLeft="2" paddingRight="2" paddingTop="2" verticalAlign="middle" visible="{ArticuloCompraVentaCosto(data).docVentaId != null}">
								<s:Button id="cmdOpen" width="100%" height="100%" icon="@Embed('/assets/general/Open.png')" click="cmdAbrir_clickHandler(event)" toolTip="Abrir venta" />
							</s:VGroup>
						</s:GridItemRenderer>
					</fx:Component>
				</s:itemRenderer>
			</s:GridColumn>

		</s:ArrayList>
		
		<s:NumberFormatter id="numberFormatter" locale="es_ES"/>
	</fx:Declarations>

	<s:VGroup width="100%" height="100%" gap="0">
		<facturacion:FiltrosComprasPlaza id="pnlFilters" width="100%" creationComplete="pnlFilters_creationCompleteHandler(event)" dropShadowVisible="false" borderAlpha="0"/>
		<s:Panel width="100%" height="100%" backgroundAlpha="0.0" title="Listado de compras plaza" dropShadowVisible="false" borderAlpha="0">
			<s:VGroup width="100%" height="100%">
				
				<s:HGroup width="100%" height="100%" gap="10">
					<s:DataGrid id="dgComprasPlaza" width="100%" height="100%" keyDown="dgComprasPlaza_keyDownHandler(event)" sortableColumns="true" columns="{cols}" focusEnabled="true" dataProvider="{comprasPlaza}"/>
					<s:VGroup width="140" paddingRight="10" paddingTop="32">
						<s:Button id="cmdSelectAll" width="100%" height="32" click="cmdSelectAll_clickHandler(event)" label="Marcar todos" styleName="textButton"/>
						<s:Button id="cmdUnselectAll" width="100%" height="32" click="cmdUnselectAll_clickHandler(event)" label="Desmarcar todos" styleName="textButton"/>
						<s:Spacer height="45" />
						<s:Button id="cmdActualizarCostos" width="100%" height="32" click="cmdActualizarCostos_clickHandler(event)" label="Actualizar costos" styleName="textButton"/>

					</s:VGroup>
				</s:HGroup>
			</s:VGroup>
			
			<s:controlBarContent>
				<s:HGroup width="100%" horizontalAlign="right" paddingBottom="0" paddingTop="0" verticalAlign="middle">
					<mx:Image id="loader1" source="@Embed(source='assets/general/logo_oscuro.gif')" alpha=".5" scaleX=".25" scaleY=".25" />
					<s:Spacer width="100%" />
				</s:HGroup>
			</s:controlBarContent>
		</s:Panel>
	</s:VGroup>
	
</s:VGroup>
