<?xml version="1.0" encoding="utf-8"?>
<s:Panel xmlns:components="biz.fulltime.ui.components.*" xmlns:components1="components.*" xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:layout="org.alivepdf.layout.*"
		 xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:s="library://ns.adobe.com/flex/spark" 
		 width="100%" height="100%" creationComplete="creationCompleteHandler(event)" borderVisible="true" styleName="pntLineasVenta" title="Costos">

	<fx:Script>
		<![CDATA[
			import biz.fulltime.conf.ServerConfig;
			import biz.fulltime.dto.ReportParameters;
			import biz.fulltime.model.Articulo;
			import biz.fulltime.model.Moneda;
			
			import com.hillelcoren.components.AutoComplete;
			
			import mx.collections.ArrayCollection;
			import mx.collections.ICollectionView;
			import mx.collections.XMLListCollection;
			import mx.controls.Alert;
			import mx.core.IFlexDisplayObject;
			import mx.events.CalendarLayoutChangeEvent;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.formatters.DateFormatter;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.remoting.RemoteObject;
			
			import org.alivepdf.pdf.PDF;
			
			import spark.components.TitleWindow;
			import spark.components.gridClasses.GridColumn;
			import spark.events.TextOperationEvent;
			
			import util.CatalogoFactory;
			import util.ErrorPanel;

			private var _cotizacionesXML:XML;

			[Bindable]
			public var moneyDP:ArrayCollection;

			private var helpWindow:TitleWindow;

			private var repParameters:ReportParameters;

			[Embed(source = "/assets/MyriadWebPro.TTF", mimeType = "application/octet-stream")]
			private var fontStream:Class;

			[Embed(source = "/assets/myriad.afm", mimeType = "application/octet-stream")]
			private var afmStream:Class;

			private var remObj:RemoteObject;
			
			[Bindable]
			private var _linesCount:String = "5";

			override protected function commitProperties():void {
				super.commitProperties();
				
				if (_changeValues) {
					_changeValues = false;
					
					var codart:String;
					if (acArticulo.selectedItem) {
						codart = (acArticulo.selectedItem as Articulo).codigo;
					}
					var dateDesde:Date = txtFechaDesde.selectedDate as Date;
					
					var costoAnterior:String;
					var valorCostoAnterior:String; 
					if (rbCostoCualquiera.selected) {
						costoAnterior = "costoCualquiera";
					} else if(rbCostoNoEstablecido.selected) {
						costoAnterior = "costoNoEstablecido";
					} else {
						costoAnterior = "costoEspecifico";
						valorCostoAnterior = txtCostoEspecifico.text;  
					}					
					var costoNuevo:String = txtCostoNuevo.text;
					var monedaNuevoCosto:String;
					if (cmbMoney.selectedItem) {
						monedaNuevoCosto = (cmbMoney.selectedItem as Moneda).codigo;
					}
					var tcd:String = txtCotizacion.text;					
					if (codart && dateDesde && costoNuevo && monedaNuevoCosto && tcd) {
						if (costoAnterior == "costoEspecifico") {
							cmdAceptar.enabled = valorCostoAnterior ? true : false;
						} else {
							cmdAceptar.enabled = true;
						}
					} else {
						cmdAceptar.enabled = false;
					}					
				}
			}

			protected function creationCompleteHandler(event:FlexEvent):void {
				remObj = new RemoteObject();
				remObj.destination = "CreatingRpc";
				remObj.channelSet = ServerConfig.getInstance().channelSet;
				remObj.showBusyCursor = true;
				remObj.addEventListener(ResultEvent.RESULT, onResult);
				remObj.addEventListener(FaultEvent.FAULT, onFault);
			}

			private function onResult(event:ResultEvent):void {
				_linesCount = (event.result as Number).toString();

				lblMsg.visible = true;
				lblMsg.includeInLayout = true;
				
				var timer:Timer = new Timer(4000, 1);
				timer.addEventListener(TimerEvent.TIMER_COMPLETE, function(evt:Event):void {
					lblMsg.visible = false;
					lblMsg.includeInLayout = false;
				});
				timer.start();
				
			}

			protected function resetFields():void {
			}

			protected function cmdExportar_clickHandler(event:MouseEvent):void {
			}
			
			 
			//----------------------------- 
			// Private function 
			//----------------------------- 
			/**
			 *
			 * A partir de un elemento pasado se genera un ICollectionView
			 * para su correcto recorrido
			 *
			 * @param obj         Objeto a convertir a ICollectionView
			 *
			 *
			 * @return referencia a un ICollectionView.
			 *
			 */
			static private function getDataProviderCollection(obj:Object):ICollectionView {
				if ((obj is Number && isNaN(obj as Number)) || (!(obj is Number) && obj == null)) {
					return null;
				} else if (obj is ICollectionView) {
					return obj as ICollectionView;
				} else if (obj is Array) {
					return new ArrayCollection(obj as Array);
				} else if (obj is XMLList) {
					return new XMLListCollection(obj as XMLList);
				} else if (obj is XML) {
					var col:XMLListCollection = new XMLListCollection();
					col.addItem(obj);
					return col;
				} else if (obj is Object) {
					return new ArrayCollection([obj]);
				} else {
					return null;
				}
			}

			private function onFault(event:FaultEvent):void {
				if (helpWindow == null) {
					helpWindow = new TitleWindow();
					helpWindow.title = "Error";
					helpWindow.width = 360;

					var errorPanel:ErrorPanel = new ErrorPanel();
					errorPanel.errorText = "Error al realizar cambio de costos.";
					errorPanel.detailsText = event.fault.faultString + "[" + event.fault.faultCode + "]";
					errorPanel.showButtons = true;

					PopUpManager.addPopUp(helpWindow, this, true);
					PopUpManager.centerPopUp(helpWindow);

					helpWindow.addEventListener(CloseEvent.CLOSE, closeHandler);
					errorPanel.addEventListener(CloseEvent.CLOSE, closeHandler);

					helpWindow.y = 60;

					helpWindow.addElement(errorPanel);
				}

			}

			private function closeHandler(event:Event):void {
				helpWindow.removeEventListener(CloseEvent.CLOSE, closeHandler);
				PopUpManager.removePopUp(helpWindow as IFlexDisplayObject);
				helpWindow = null;
			}

			private function labelSize(item:Object, column:GridColumn):String {
				return sizeFormatter.format(item[column.dataField]);
			}

			private function labelModified(item:Object, column:GridColumn):String {
				return dateFormatter.format(new Date(item.time));
			}

			private function labelCrc(item:Object, column:GridColumn):String {
				return item.crc.toString(16).toUpperCase();
			}


			protected function txtFechaDesde_creationCompleteHandler(event:FlexEvent):void {
				var fechaDesde:Date = new Date();
				if (fechaDesde.date <= 15) {
					fechaDesde = util.DateUtil.clone(fechaDesde).subtract(util.DateUtil.MONTH, 1).datetime;
				}
				fechaDesde.date = Math.min(fechaDesde.date, 15);
				txtFechaDesde.selectedDate = fechaDesde;

			}

			protected function cmdAceptar_clickHandler(event:MouseEvent):void {
				var codart:String = (acArticulo.selectedItem as Articulo).codigo;
				
				var dateDesde:Date = txtFechaDesde.selectedDate as Date;
				var dateHasta:Date = txtFechaHasta.selectedDate as Date; 
				
				var costoAnterior:String;
				var valorCostoAnterior:String; 
				if (rbCostoCualquiera.selected) {
					costoAnterior = "costoCualquiera";
				} else if(rbCostoNoEstablecido.selected) {
					costoAnterior = "costoNoEstablecido";
				} else {
					costoAnterior = "costoEspecifico";
					valorCostoAnterior = txtCostoEspecifico.text;  
				}
				
				var costoNuevo:String = txtCostoNuevo.text;
				var monedaNuevoCosto:String = (cmbMoney.selectedItem as Moneda).codigo;
				
				var tcd:String = txtCotizacion.text;
				
				remObj.modificarCostos(codart, dateDesde, dateHasta, costoAnterior, valorCostoAnterior, costoNuevo, monedaNuevoCosto, tcd);
			}

			protected function cmdCancelar_clickHandler(event:MouseEvent):void {
				dispatchEvent(new CloseEvent(CloseEvent.CLOSE));

			}
			
			public function codigoNombreLabelFunction(item:Object):String {
				var label:String;
				
				if (item && item.hasOwnProperty("codigo")) {
					label = item.codigo;
				}
				if (item && item.hasOwnProperty("nombre")) {
					label += " - " + item.nombre;
				}
				return label;
			}
			
			public var _changeValues:Boolean = false;

			protected function acArticulo_changeHandler(event:Event):void {
				_changeValues = true;
				invalidateProperties();
			}
			
			protected function rbCostoEspecifico_changeHandler(event:Event):void {
				_changeValues = true;
				invalidateProperties();
			}
			
			protected function rbCostoCualquiera_changeHandler(event:Event):void {
				_changeValues = true;
				invalidateProperties();
			}
			
			protected function rbCostoNoEstablecido_changeHandler(event:Event):void {
				_changeValues = true;
				invalidateProperties();
			}
			
			protected function txtCostoNuevo_changeHandler(event:TextOperationEvent):void {
				_changeValues = true;
				invalidateProperties();
			}
			
			protected function cmbMoney_changeHandler(event:Event):void {
				_changeValues = true;
				invalidateProperties();
			}
			
			protected function txtCotizacion_changeHandler(event:TextOperationEvent):void {
				_changeValues = true;
				invalidateProperties();
			}
			
			protected function txtFechaDesde_changeHandler(event:CalendarLayoutChangeEvent):void {
				_changeValues = true;
				invalidateProperties();
			}
			
			protected function txtFechaHasta_changeHandler(event:CalendarLayoutChangeEvent):void {
			}
			
		]]>
	</fx:Script>

	<fx:Declarations>
		<mx:NumberFormatter id="sizeFormatter" useThousandsSeparator="true" />
		<mx:DateFormatter id="dateFormatter" formatString="MM/DD/YYYY L:NN A" />
	</fx:Declarations>

	<s:BorderContainer width="100%" height="100%" backgroundAlpha=".16" backgroundColor="#6E87B5" borderAlpha="0">
		<s:layout>
			<s:VerticalLayout paddingBottom="0" paddingLeft="0" paddingRight="0" paddingTop="0" gap="10" />
		</s:layout>

		<s:Panel width="100%" dropShadowVisible="false" title="ArtÃ­culos" styleName="pnlForm">
			<s:Form id="form1" width="100%">
				<s:layout>
					<s:FormLayout gap="-12" />
				</s:layout>
				<s:FormItem label="ArtÃ­culo" width="100%">
					<components:MyAutoComplete id="acArticulo" width="100%" dataProvider="{ CatalogoFactory.getInstance().articulos }"
											   matchType="anyPart" selectedItemStyleName="{ AutoComplete.STYLE_MAC_MAIL }" allowMultipleSelection="false" labelField="nombre"
											   labelFunction="codigoNombreLabelFunction" backspaceAction="remove" allowNewValues="false" 
											   dropDownRowCount="10" toolTip="{acArticulo.text}" change="acArticulo_changeHandler(event)"/>

				</s:FormItem>
				<s:FormItem label="Fecha desde">
					<mx:DateField id="txtFechaDesde" change="txtFechaDesde_changeHandler(event)" creationComplete="txtFechaDesde_creationCompleteHandler(event)"
								  yearNavigationEnabled="true"/>
				</s:FormItem>
				<s:FormItem label="Fecha hasta">
					<s:HGroup width="100%" verticalAlign="middle">
						<mx:DateField id="txtFechaHasta" change="txtFechaHasta_changeHandler(event)" yearNavigationEnabled="true" />
						<s:Label text="(Opcional)" />
					</s:HGroup>

				</s:FormItem>
				<s:HGroup width="100%" horizontalAlign="right" paddingBottom="0" paddingRight="10" paddingTop="0">
					<s:Button label="Vista previa" chromeColor="#DFE6EB" styleName="previewButton" enabled="false"/>
				</s:HGroup>
			</s:Form>
		</s:Panel>
		<s:Panel width="100%" height="100%" title="ActualizaciÃ³n" styleName="pnlForm">
			<s:Form id="form2" width="100%" height="100%">
				<s:layout>
					<s:FormLayout gap="-12" />
				</s:layout>

				<s:FormItem label="Costo anterior">
					<s:VGroup paddingBottom="20">
						<s:RadioButton id="rbCostoCualquiera" label="Cualquiera" selected="true" change="rbCostoCualquiera_changeHandler(event)"/>
						<s:HGroup width="100%" verticalAlign="middle" gap="20">
							<s:RadioButton id="rbCostoEspecifico" label="Elegir" change="rbCostoEspecifico_changeHandler(event)"/>
							<s:TextInput id="txtCostoEspecifico" width="120" enabled="{rbCostoEspecifico.selected}" prompt="costo" restrict="0-9." textAlign="right"/>
						</s:HGroup>
						<s:RadioButton id="rbCostoNoEstablecido" label="Sin Establecer" change="rbCostoNoEstablecido_changeHandler(event)"/>
					</s:VGroup>
				</s:FormItem>
				<s:FormItem label="Costo nuevo">
					<s:TextInput id="txtCostoNuevo" width="100" prompt="Ingrese Costo" restrict="0-9." textAlign="right" change="txtCostoNuevo_changeHandler(event)"/>
				</s:FormItem>
				<s:FormItem width="100%" label="Moneda:">
					<s:HGroup width="100%" verticalAlign="middle">
						<components:MyAutoComplete id="cmbMoney" width="130" textAlign="left" dataProvider="{ CatalogoFactory.getInstance().monedas }"  
												   matchType="anyPart" labelField="nombre" prompt="moneda"
												   allowNewValues="false" selectedItemStyleName="{ AutoComplete.STYLE_MAC_MAIL }" allowDuplicates="false"
												   allowMultipleSelection="false" allowEditingNewValues="false" 
												   labelFunction="codigoNombreLabelFunction" backspaceAction="focus" change="cmbMoney_changeHandler(event)"/>
						
						
						<s:Spacer width="100%" />
						<s:Label fontWeight="bold" text="CotizaciÃ³n" />
						<s:TextInput id="txtCotizacion" width="80" restrict="0-9." textAlign="right" change="txtCotizacion_changeHandler(event)"/>
					</s:HGroup>
				</s:FormItem>
			</s:Form>
		</s:Panel>
		<s:Label id="lblMsg" width="100%" textAlign="center" text="Se modificarÃ³n {_linesCount} lÃ­nea/s." color="red"  visible="false" includeInLayout="false" maxDisplayedLines="1" fontWeight="bold"/>
	</s:BorderContainer>


	<s:controlBarContent>
		<s:HGroup width="100%" paddingBottom="0" paddingTop="0" verticalAlign="middle">
			<mx:Image id="loader1" source="@Embed(source='assets/general/logo_oscuro.gif')" alpha=".5" scaleX=".25" scaleY=".25" />
			<s:Spacer width="100%" />
			<components1:IconButton id="cmdAceptar" click="cmdAceptar_clickHandler(event)" styleName="aplicarButton16" label="Aceptar" enabled="false"/>
			<components1:IconButton id="cmdCancelar" click="cmdCancelar_clickHandler(event)" styleName="closeButton16" label="Cancelar" />
		</s:HGroup>
	</s:controlBarContent>
</s:Panel>
