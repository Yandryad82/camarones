<?xml version="1.0" encoding="utf-8"?>
<components:AutoComplete xmlns:components="com.hillelcoren.components.*" xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:mx="library://ns.adobe.com/flex/mx"
						 xmlns:s="library://ns.adobe.com/flex/spark" creationComplete="autocomplete1_creationCompleteHandler(event)" fontFamily="Helvetica"
						 keyDown="autoCompleteClientes_keyDownHandler(event)" showRemoveIcon="true" buttonMode="true" tabFocusEnabled="true" borderAlpha="1">

	<components:inlineButton>
		<mx:Button skin="skin.AutoCompleteButton" click="handleButtonClick()" buttonMode="false" />
	</components:inlineButton>

	<fx:Script>
		<![CDATA[
			import com.hillelcoren.utils.StringUtils;
			
			import mx.core.UIComponent;
			import mx.events.FlexEvent;
			import mx.managers.FocusManager;

			private var _next_focus:UIComponent;

			private var _previous_focus:UIComponent;
			
			protected function autocomplete1_creationCompleteHandler(event:FlexEvent):void {
				this.filterFunction = myFilterFunction;
			}

			public function set next_focus(value:UIComponent):void {
				_next_focus = value;
			}

			public function set previous_focus(value:UIComponent):void {
				_previous_focus = value;
			}
			
			public function myFilterFunction( item:Object, searchStr:String ):Boolean {
				if (!searchStr || searchStr.length == 0) {
					return true;
				}
				
				var str:String = cleanStringFromSpecials(labelFunction( item ));
				
				switch (_matchType) {
					case MATCH_ANY_PART:
						return StringUtils.contains( str.toLowerCase(), searchStr.toLowerCase() );
					case MATCH_BEGINNING:
						return StringUtils.beginsWith( str.toLowerCase(), searchStr.toLowerCase() );
					case MATCH_WORD:
						return StringUtils.anyWordBeginsWith( str.toLowerCase(), searchStr.toLowerCase() );
				}
				
				return false;

			}

			private function cleanStringFromSpecials(str:String):String {
				str = str.toLowerCase()
				
				var replacedStr:String = str.replace(/[á]/gi, "a");
				replacedStr = replacedStr.replace(/[é]/gi, "e");
				replacedStr = replacedStr.replace(/[í]/gi, "i");
				replacedStr = replacedStr.replace(/[ó]/gi, "o");
				replacedStr = replacedStr.replace(/[ú]/gi, "u");
				
				return replacedStr;
			}
			

			override protected function keyDownHandler(event:KeyboardEvent):void {
				callLater(function():void {
					if (!isDropDownVisible()) {
						if (event.keyCode == Keyboard.DOWN) {
							if (searchText.length == 0) {
								showDropDown();
							}
						} else if (event.keyCode == Keyboard.ENTER) {
							if (_next_focus) {
								_next_focus.setFocus();
							}
						} else if (event.keyCode == Keyboard.TAB) {
							if (event.shiftKey) {
								if (_previous_focus) {
									_previous_focus.setFocus();
								}
							} else {
								if (_next_focus) {
									_next_focus.setFocus();
								}
							}
						}
					}


				});
			}

			/**
			 *  The event handler called for a <code>keyUp</code> event.
			 *  If you override this method, make sure to call the base class version.
			 *
			 *  @param event The event object.
			 *
			 *  @langversion 3.0
			 *  @playerversion Flash 9
			 *  @playerversion AIR 1.1
			 *  @productversion Flex 3
			 */
			override protected function keyUpHandler(event:KeyboardEvent):void {
				// You must override this function if your component accepts focus
			}

			protected function autoCompleteClientes_keyDownHandler(event:KeyboardEvent):void {

			}

			private function handleButtonClick():void {
				if (isDropDownVisible()) {
					hideDropDown();
				} else {
					search();
					showDropDown();
				}
			}
			
			
		]]>
	</fx:Script>



</components:AutoComplete>



